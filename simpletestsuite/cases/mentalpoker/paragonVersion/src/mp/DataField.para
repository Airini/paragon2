/* Jif poker - an implementation of mental poker protocol in Jif
 * (C) 2005 Aslan Askarov
 *
 */
package mp;

import java.lang.*;
import mp.*;

// changed from JIF: use final everywhere + p
// since nothing is changed
public class DataField<policy p>
{

	private ?p final int timestamp;
	private ?p final String info;
	private ?p final DataFieldAttribute<p> attrib;
	private ?p final String playerName;
	
	public DataField (
      ?p String playerName,
			?p int ts, 
			?p String inf, 
			?p DataFieldAttribute<p> attr) {
		this.playerName = playerName;
		this.timestamp 	= ts;
		this.info 		= inf;
		this.attrib 	= attr;
	}

	// Jif version had label on non-existing exceptions..?
	// maybe because they werent catched in an earlier version
	public ?p !p byte[]<p> toByteArray()  {
		// concatenate timestamp with info with attributes
		
		try {	
      			byte[]<p> a = Integer.toString(this.timestamp).getBytes();
			byte[]<p> b = info.getBytes();

			byte[]<p> c = attrib.toByteArray();
			
			int n = a.length + b.length + c.length;
			byte[]<p> r = new byte[n]<p>;
			int i = 0 ;
			for (int j = 0; j < a.length; j++, i++)
				r[i] = a[j];
			for (int j = 0; j < b.length; j++, i++) 
				r[i] = b[j];
			for (int j = 0; j < c.length; j++, i++) 
				r[i] = c[j];
			return r;
		} catch (NullPointerException ignored) {
		} catch (ArrayIndexOutOfBoundsException ignored) {
		} 
		
		
		return null;
	}
	/**
	 * @return Returns the attrib.
	 */
     public ?p DataFieldAttribute<p> getAttrib() {
         return attrib;
     }
     
	/**
	 * @return Returns the info.
	 */
	public ?p String getInfo() {
		return info;
	}
	/**
	 * @return Returns the playerName.
	 */
	public ?p String getPlayerName() {
		return playerName;
	}
	/**
	 * @return Returns the timestamp.
	 */
     public ?p int getTimestamp() {
		return timestamp;
	}
    
    public ?p String toString() {
        return "mp.DataField";
    }
    
    //ever used?
    /*
    public ?(p * policyof(o)) boolean 
    equals(Object o) {
        if (o == null)
            return false;
        if (!(o instanceof DataField[L]))
            return false;
        try {
            DataField[L] that = (DataField[L])o;
            return ((this.timestamp == that.timestamp) &&
                (this.info.equals(that.info)) && 
                (this.playerName.equals(that.playerName)) &&
                (this.attrib.equals(that.attrib)) );
        } catch (ClassCastException impossible) {
        } catch (NullPointerException ignored) {
        }
        return false;
    }
    
    public int{L} hashCode() {
        try {
            int h = this.timestamp;
            h += this.info == null? 0 : 31*h*this.info.hashCode();
            h += this.playerName == null ? 0: 31*h*playerName.hashCode();
            h += h*this.attrib.hashCode();
            return h;
        } catch (NullPointerException ignored) {
        }
        return 0;
    }
    */
}

