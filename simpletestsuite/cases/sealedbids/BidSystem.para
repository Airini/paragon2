import java.lang.String;

public class BidSystem {

    Bidder[] bidders;
    
    public static final policy bottom = {'x:};
    
    private static final policy allBidders = 
        { 'x : BidLocks.AuctionClosed, BidLocks.HasBid('x) ;
          'x : BidLocks.DetermineWinner };


    !bottom
    BidSystem(?bottom int nbidders) {
        generateBidders(nbidders);
        collectBids();
        Bidder winner = determineWinner();
        if (winner != null) {
        
            open BidLocks.Winner(winner.id);
            reportResult(winner.bid);
            sendSpoils(winner);
        }
    }

    void sendSpoils(?allBidders Bidder winner) {
        winner.chan.put("                               o==)_\\ \n"
                + "                                 ',====_ \n"
                + "      _-~_                         \\ \\  \\_____ \n"
                + " \\ _-~_-~_),-._____..______         \\ \\  `\\  || \n"
                + "  ~_-~_-~\\_|_______||______|         \\ \\   `\\|| \n"
                + "  (_-~\\,-'_--~~~~___~~~\\    \\        |  |    `\\_ \n"
                + "  ())=/ /~      (_~_)   | _ /        / /        `-_ \n"
                + "     / (           __  / ==/        / /            \\ \n"
                + "    (___\\_________===_/___/________/_/___==O=====O==O \n"
                + "   _//|  ( () )/ |~`-----------------'  |  ( ()')  | \n"
                + "  '-'  \\_ `--' _/                        \\_ `--' _/ \n"
                + "         `----'        The Spoils          `----'");
    }

    !bottom
    void generateBidders(?bottom int nbidders) {
        bidders = new Bidder[nbidders];
        for (int id = 0; id < nbidders; id++)
            bidders[id] = new Bidder(id + 1);
    }

    !bottom
    void collectBids() {
        for (int i = 0; i < bidders.length; i++) {
            Bidder b = bidders[i];
            try {
                b.getBid();
            } catch (NoBidExc e) {

            }
        }
    }

    +BidLocks.AuctionClosed 
    ?allBidders
    Bidder determineWinner() {
        Bidder winner = null;
        open BidLocks.DetermineWinner {
            for (int i = 0; i < bidders.length; i++) {
                Bidder b = bidders[i];
                if (BidLocks.HasBid(b.id)) {
                    // ISSUE, tmp variable needed otherwise fails to infer:
                    boolean res = b.bid > winner.bid;
                    if (winner == null || res) {
                        winner = b;
                    }
                }
            }
        }
        open BidLocks.AuctionClosed;
        return winner;
    }
    
    

    !allBidders
    ~BidLocks.AuctionClosed
    void reportResult(?allBidders int winBid) {
        for (int i = 0; i < bidders.length; i++) {
            Bidder b = bidders[i];
            if (BidLocks.HasBid(b.id)) {
                b.chan.put(winBid);
            }
        }
    }
    
    

    public static !bottom void main(String[] arg) {
        new BidSystem(3);
    }

}
