/*
 * MailBody.para
 *
 * Version 0.1
 *
 * February 2013
 *
 * Copyright:           Chalmers University, CSE department, Paragon Team
 * Lioense:             BSD 3-Clause
 * Implementation v0.1: Bart van Delft
 */
 
package se.chalmers.parajpmail.cryptmessage;

import se.chalmers.parajpmail.runtime.SimpleUnixRuntime;
import se.chalmers.parajpmail.jpmailpol.GlobalPol;
import se.chalmers.parajpmail.jpmailpol.JPMailPolicy;

/**
 * Wrapper around the email body, ensuring that the body content cannot be send
 * to the public network unless proper encryption, as specified by the receiver
 * has been performed.
 */
public class MailBody {

    /**
     * Policy on the content of the email body. Allows declassification via
     * AES or DES encryption, but only if the receiver allowed for that.
     */
    public final policy contentPol = 
      AESEncryption.encPol * 
            { SimpleUnixRuntime.currentUser : 
            ; GlobalPol.network : JPMailPolicy.AllowsAESEncryption('x)
                                , GlobalPol.Receiver('x)
            }
    + DESEncryption.encPol *
            { SimpleUnixRuntime.currentUser : 
            ; GlobalPol.network : JPMailPolicy.AllowsDESEncryption('x)
                                , GlobalPol.Receiver('x)
            }
    // + FilterMessage.filtPol
    ;

    private final ?contentPol String content;

    public MailBody(?contentPol String content) {
        this.content = content;
    }

    public ?contentPol String getContent() {
        return this.content;
    }

}