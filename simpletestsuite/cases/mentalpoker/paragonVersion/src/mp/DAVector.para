/* Jif poker - an implementation of mental poker protocol in Jif
 * (C) 2005 Aslan Askarov
 *
 */
package mp;


public class DAVector<policy p> 
extends java.util.ArrayList<p>
implements DataFieldAttribute<p>
 {

   public ?p int getType() {
      return DataFieldAttribute.DAVector;
   }
	
	/**
	 * 
	 */
	public DAVector() {
		super();
	}
	
	public !p ?p byte[]<p> toByteArray() {
		int n = this.size();
		int size = this.byteLength();
		byte[]<p> retval = new byte[size]<p>;
		int j = 0;
		try {
				for (int i = 0; i < n; i++) {
					byte[]<p> v_i = ((DataFieldAttribute<p>) this.get(i)).toByteArray();
					System.<p>arraycopy(v_i, 0, retval, j, v_i.length);
					j += v_i.length;
				}
				return retval;
		} catch (IndexOutOfBoundsException e) {
		} catch (ClassCastException e) {
		} catch (NullPointerException e) {
		} catch (ArrayStoreException e) {
		}

		return null;
	}

//	/* (non-Javadoc)
//	 * @see poker.DataFieldAttribute#byteLength()
//	 */
	public ?p int byteLength() {
		int n = this.size();
		int byteLength = 0;
		try {
				for (int i = 0; i < n; i++ ) {
					byteLength += ((DataFieldAttribute<p>)this.get(i)).byteLength();
				}
		} catch (IndexOutOfBoundsException e) {
		} catch (ClassCastException e) {
		} catch (NullPointerException e) {
		}
		return byteLength;
	}
	
	public !p void permute() {
		int t = this.size();
		try {
				for (int i = 0; i < 100; i++) {
					int u = (int) java.lang.Math.round((t - 1)
							* java.lang.Math.random());
					int v = (int) java.lang.Math.round((t - 1)
							* java.lang.Math.random());
					this.set(u, this.get(v));
					this.set(v, this.get(u));
				}
		} catch (IndexOutOfBoundsException e) {
		}
	}

}
