/* Jif poker - an implementation of mental poker protocol in Jif
 * (C) 2005 Aslan Askarov
 */
package mp;

import java.io.*;
import jif.runtime.Runtime;
import java.security.*;

public class Communicator[principal P] {
    
    
    public void play{}(String{} playerName) where caller(P){
        try {
            Main m = Main.m;
            if (m == null) return;
            final principal{} pp = m.p;
            Runtime[pp] runtime = Runtime[pp].getRuntime(pp);
            
            if (runtime == null) return;
            
            PrintStream[{pp:}]{pp:} out = runtime.out();
            InputStream[{pp:}]{pp:} in  = runtime.in();

            
            out.println("Playing mental poker...");
            
            SerializeWriteHelper[{pp:}] writer = new SerializeWriteHelper[{pp:}](out);
            
            InputStreamReader[{pp:}] sr = new InputStreamReader[{pp:}](in);
            BufferedReader[{pp:}] br = new BufferedReader[{pp:}](sr);
            SerializeReadHelper[{pp:}] reader 
                = new SerializeReadHelper[{pp:}](br);

            // Game starts here !
            
            DNCChain[{pp:}] chain = new DNCChain[{pp:}](writer);
            Player[P,{pp:}] player = new Player[P,{pp:}](chain, playerName);
            out.println("Initializing " + playerName);
           
            
            try {
                 player.initProtocol();                 
                 out.println("wrote " + chain.size() + " links");
                 out.flush();     
            
               for (int i = 0; i < 5; i++){
                    DNCLink[{pp:}]{pp:} link = reader.readDNCLink();
                    chain.appendLink(link);
                    out.println("read " +  Integer.toString(i+1) + " links");
                    out.flush();                    
                }            
                out.println("total " + chain.size() + " links");         
                out.flush();
            
                // dealing 6 cards
                // playerName
            
 
                
                for (int  i = 1; i <= 6 ; i++) {				
                    if (i % 2 == 0) {
                        if (playerName.compareTo("Alice") == 0) { // we are Alice
                            out.println("Alice trying to obtain card # " +
                                Integer.toString(i));                             

                            
                            player.drawCard(i);   // produces 1 link                                                     
                            out.println("drawCard OK"); // 2
                            out.flush();
                            
                            player.processSelfCardDraw(); // produces 1 link
                            out.println("processSelfCardDraw OK"); // 3
                            out.flush();
                            
                            DNCLink [{pp:}]{pp:} link = reader.readDNCLink();
                            chain.appendLink(link);
                            out.println("got processCardDraw0 link");
                            out.flush();
                            
                            player.finishCardDraw();
                            out.println("finishCardDraw OK");                                                    
                            out.println("Card obtained");
                            out.flush();
                        } else {  // we are bob
                            // drawCard
                            DNCLink [{pp:}]{pp:} link = reader.readDNCLink();
                            chain.appendLink(link);
                            out.println("got drawCard link");
                            out.flush();
                            
                            // processSelfCardDraw
                            link = reader.readDNCLink();
                            chain.appendLink(link);
                            out.println("got processSelfCardDraw link");
                            out.flush();
                            
                            player.processCardDrawO();
                            out.println("processCardDraw0 OK");
                            out.flush();
                        }
                    } else {
                        if (playerName.compareTo("Bob") == 0) {
                            out.println("Bob trying to obtain card # "
                                + Integer.toString(i));                             
                            out.flush();
                            
                            player.drawCard(i);
                            out.println("drawCard OK");
                            out.flush();
                            
                            DNCLink [{pp:}]{pp:} link = reader.readDNCLink();
                            chain.appendLink(link);
                            out.println("got processCardDraw link");
                            out.flush();
                            
                            player.processSelfCardDraw();
                            out.println("processSelfCardDraw OK");
                            out.flush();
                            
                            player.finishCardDraw();
                            out.println("Card obtained");
                            out.flush();
                            
                        } else { // we are Alice 
                            DNCLink [{pp:}]{pp:} link = reader.readDNCLink();
                            chain.appendLink(link);
                            out.println("got drawCard link");
                            out.flush();
                            
                            player.processCardDraw();
                            out.println("processCardDraw OK");
                            out.flush();
                            
                            // processSelfCardDraw
                            link = reader.readDNCLink();
                            chain.appendLink(link);
                            out.println("got processSelfCardDraw link");
                            out.flush();
                            
                        }                
                    }
                }
                
                out.println("Revealing encryption key");
                writer.writeBigIntVector(player.revealPrivateKey());
                
                out.println("Revealing permutation");
                writer.writeByteArray(player.revealPermutation());
                
                
                out.println("Revealing permutation matrix");
                PermutationMatrix [{pp:}] theMatrix = player.revealMatrix();
                //out.println(theMatrix.toString());
                writer.writeMatrix(theMatrix);
                
                
                out.println("Reading other encryption key");
                
                BigIntVector[{pp:}] oKey = reader.readBigIntVector();
                
                out.println("Reading other permutation");
                byte{pp:}[]{pp:} oPerm = reader.readByteArray();
                
                out.println("Reading other permutation matrix");
                PermutationMatrix[{pp:}]{pp:} oMatrix = reader.readMatrix();
                
                out.println("validation");
                
                
                // printing the chain for debugging
             
                for (int i = 0; i < chain.size(); i++) {
                    DNCLink[{pp:}] link = chain.getLink(i);
                    DataField[{pp:}] data = link.getData();
                    
                    String str = data.getPlayerName();
                    str += " " + data.getInfo() + " ";
                    if (data.getAttrib() == null)
                       str += "null";
                    else
                       str += "value";
                    
                    if (data.getInfo().compareTo("z_i") == 0) {
                        str += " " + data.getAttrib().toString();
                    }
                    
                    out.println(str);
                }  
                
                boolean vv = player.validate(oKey, oPerm, oMatrix);
                out.println("validation result");
                out.println(vv);
                
                
            } catch (Exception e) {
                out.println("Exception occured: "+e.toString());
                out.flush();
            }
            
            int{pp:} [] h1 = player.showCards();
            
            out.print("  Cards obtained: [");
            int{pp:} j = 0;
            while (h1[j] != -1) {
                out.print(h1[j]);
                out.print(" ");
                j ++;
            }
            out.println(" ]");
        } catch (Exception ignored) {            
        }     
    }
    
    
}

