package se.chalmers.parajpmail.cryptmessage;

import se.chalmers.parajpmail.jpmailpol.JPMailPolicy;
import se.chalmers.parajpmail.jpmailpol.GlobalPol;

import java.security.GeneralSecurityException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Security;
//import java.util.Arrays;

import javax.crypto.Cipher;

//import org.bouncycastle.jce.provider.BouncyCastleProvider;

import se.chalmers.parajpmail.runtime.SimpleUnixRuntime;

public class RSAEncryption {

  private lock RSAEncrypted;

  public static final policy encPol = { 'x : RSAEncrypted };  
  
  private static final int KEYSIZE = 1024;

  public static ?{'x:} <policy pubKey, policy privKey> 
  KeyPair<pubKey, privKey> generateKeyPair() throws GeneralSecurityException {
    try
    {
      KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA", "BC");
      kpg.initialize(KEYSIZE);
      return (kpg).<pubKey, privKey>generateKeyPair();
    } catch (java.security.NoSuchAlgorithmException e) {
      throw new GeneralSecurityException(e.getMessage());
    } catch (java.security.NoSuchProviderException e) {
      throw new GeneralSecurityException(e.getMessage());
    } catch (java.lang.IllegalArgumentException e) {
      throw new GeneralSecurityException(e.getMessage());
    } catch (java.security.InvalidParameterException e) {
      throw new GeneralSecurityException(e.getMessage());
    }
  }

  public static ?dataPol !dataPol <policy dataPol>  byte[]<dataPol> encrypt(?dataPol PublicKey pubKey, ?(dataPol*encPol) byte[]<dataPol*encPol> data)
  throws !dataPol ?dataPol GeneralSecurityException  {
    try {
      Cipher cipher = Cipher.getInstance("RSA", "BC");
      cipher.init(Cipher.ENCRYPT_MODE, pubKey);      
      byte[] res = cipher.doFinal(data);
      open RSAEncrypted {
        byte[] dRes = new byte[res.length];
        int length = res.length;
        for (int i = 0; i < length; i++)       
          dRes[i] = res[i];
        return dRes;
      }
    } catch (javax.crypto.IllegalBlockSizeException e) {
      throw new GeneralSecurityException(e.getMessage());
    } catch (javax.crypto.BadPaddingException e) {
      throw new GeneralSecurityException(e.getMessage());
    } catch (java.security.NoSuchProviderException e) {
      throw new GeneralSecurityException(e.getMessage());
    } catch (java.security.NoSuchAlgorithmException e) {
      throw new GeneralSecurityException(e.getMessage());
    } catch (java.security.InvalidKeyException e) {
      throw new GeneralSecurityException(e.getMessage());
    } catch (javax.crypto.NoSuchPaddingException e) {
      throw new GeneralSecurityException(e.getMessage());
    } catch (java.lang.IllegalArgumentException e) {
      throw new GeneralSecurityException(e.getMessage());
    } catch (java.lang.IllegalStateException e) {
      throw new GeneralSecurityException(e.getMessage());
    }
  }
  
  public static ?p !p <policy p> byte[]<p> decrypt(?p PrivateKey privKey, ?p byte[]<p> data) 
  throws !p ?p GeneralSecurityException  {
    
    try {
      Cipher cipher = Cipher.getInstance("RSA", "BC");
      cipher.init(Cipher.DECRYPT_MODE, privKey);    
      return cipher.doFinal(data);
    } catch (javax.crypto.IllegalBlockSizeException e) {
      throw new GeneralSecurityException(e.getMessage());
    } catch (javax.crypto.BadPaddingException e) {
      throw new GeneralSecurityException(e.getMessage());
    } catch (java.security.NoSuchProviderException e) {
      throw new GeneralSecurityException(e.getMessage());
    } catch (java.security.NoSuchAlgorithmException e) {
      throw new GeneralSecurityException(e.getMessage());
    } catch (java.security.InvalidKeyException e) {
      throw new GeneralSecurityException(e.getMessage());
    } catch (javax.crypto.NoSuchPaddingException e) {
      throw new GeneralSecurityException(e.getMessage());
    } catch (java.lang.IllegalArgumentException e) {
      throw new GeneralSecurityException(e.getMessage());
    } catch (java.lang.IllegalStateException e) {
      throw new GeneralSecurityException(e.getMessage());
    }
  }

  /**
   * @param args
   * @throws GeneralSecurityException 
   */
   /*
  public static void main(String[] args) throws GeneralSecurityException {
    Security.addProvider(new BouncyCastleProvider());
    KeyPair kpA = generateKeyPair();
    byte[] plain = new byte[] { 4, 5, 3, 2};
    byte[] encr = encrypt(kpA.getPublic(), plain);
    byte[] decr = decrypt(kpA.getPrivate(), encr);
    if (Arrays.equals(plain, decr))
      System.out.println("Succes");

  }
  */
  

}