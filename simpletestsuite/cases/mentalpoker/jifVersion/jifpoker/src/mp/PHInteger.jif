/* Jif poker - an implementation of mental poker protocol in Jif
 * (C) 2005 Aslan Askarov
 *
 */
package mp;

import jif.util.ArrayList;

public class PHInteger[label L]
implements DataFieldAttribute[L], JifObject[L]{
	private ArrayList[L] {L}value;
	
	public PHInteger(ArrayList[L] {L} v) {
		this.value = v;
	}
	
	public String{L} toString() {
        ArrayList[L] value = this.value;
        if (value == null) 
            return "";
		int n = value.size();
		String s = "(";
		for (int i = 0 ; i < n ;i++) {
			try  {
                BigIntPair[L] pair = (BigIntPair[L]) value.get(i);
                s += "[" + pair.getX().toString() +	", " + pair.getY() +"]";
            } catch(IndexOutOfBoundsException ignored) {
			} catch (NullPointerException ignored) {
			} catch (ClassCastException ignored) {
            }
			if (i < n-1) 
				s+=",";
		}
		s+=")";
		return s;		
	}
	
    
    public boolean{L;o} equals(IDComparable[L] o)   {
        try {
            PHInteger[L] that = (PHInteger[L])o;
            return this.value.equals(that.value);
        } catch (NullPointerException ignored) {
        } catch (ClassCastException ignored) {
        }
        return false;
    }
    
    public int{L} hashCode() {
        ArrayList[L] value = this.value;
        return value == null ? 0: value.hashCode();
    }
    
	public byte{L}[]{L} toByteArray{L}() {
        ArrayList[L] value = this.value;
        if (value == null) return null;
		int n = value.size();
		int size = this.byteLength();
		
		byte[] ret = new byte[size];
		int r = 0;
		for (int j = 0; j < n; j++) {
            byte [] v_X = null;
            byte [] v_Y = null;
			try {
                BigIntPair[L] pair = (BigIntPair[L])value.get(j);
                v_X = pair.getX().toByteArray();
                v_Y = pair.getY().toByteArray();   
                System.arraycopy(v_X, 0, ret, r, v_X.length);
                r += v_X.length;
                System.arraycopy(v_Y, 0, ret, r, v_Y.length);
                r += v_Y.length;
            } catch (IndexOutOfBoundsException ignored) { return null;
            } catch (NullPointerException ignored) { return null;
            } catch (ClassCastException ignored) { return null;
            } catch (ArrayStoreException ignored) { return null;
            }            		
		}
		return ret;
	}
	
	public int{L} byteLength() {
        ArrayList[L] value = this.value;
        if (value == null)
            return 0;
		int n = value.size();
		int bitlength = 0;
        for (int i = 0; i < n; i++) {
            try {
                BigIntPair[L] pair = (BigIntPair[L]) value.get(i);
                int inc = (int) Math.ceil((pair.getX().bitLength() + 1)/8.0);
                bitlength += inc;
                inc = (int) Math.ceil((pair.getY().bitLength() + 1)/8.0);
                bitlength += inc;
            } catch (NullPointerException ignored) { return 0;
            } catch (IndexOutOfBoundsException ignored) {  return 0;
            } catch (ClassCastException ignored) {  return 0;
            } catch (ArithmeticException ignored) {  return 0;
            }
		}
		return bitlength;
	}
	
	public ArrayList[L]{L} getValueVector() {
		return this.value;
	}
    
    public BigIntPair[L]{L} getBigIntPair(int index):{L; index} 
    throws IndexOutOfBoundsException {
        ArrayList [L] value = this.value;
        try {
            return value == null? null : (BigIntPair[L]) value.get(index);
        } catch (ClassCastException e) {}
        return null;
    }
    
    public int{L} size() {
        ArrayList[L] value = this.value;
        return value == null? 0 :value.size();
    }
        
	 
    public PHInteger[L]{L} add {L}(PHInteger[L]{L} phi) :{L}
    throws IllegalArgumentException{
		ArrayList[L] a = this.value;
        ArrayList[L] b = null;
        if (a == null || phi == null) 
			throw new IllegalArgumentException("argument is null");
        b = phi.getValueVector();
        
        if ( b == null) return null;
		
		int min = (a.size() < b.size()) ? a.size() : b.size() ;
		int max = (a.size() > b.size()) ? a.size() : b.size() ;
		
		ArrayList[L]{L} c = new ArrayList[L]();
		int i = 0;
		for (; i < min; i++) {
            try {
                BigIntPair[L]{L} pai = (BigIntPair[L]) a.get(i);
                BigIntPair[L]{L} pbi = (BigIntPair[L]) b.get(i);
                BigIntPair[L]{L} cbi = new BigIntPair[L](
                        pai.getX().add(pbi.getX()),
                        pai.getY().add(pbi.getY()));
                c.add(cbi);
            } catch (NullPointerException ignored) {  return null;
            } catch (IndexOutOfBoundsException ignored) {  return null;
            } catch (ClassCastException ignored) { return null;
            }
		}
			
		// copy the rest
		ArrayList[L] t = (max == a.size()) ? a : b;
        
        for (; i < max; i++) {
            try {
                c.add(t.get(i));
            } catch (NullPointerException ignored) {
                return null;
            } catch (IndexOutOfBoundsException ignored) {
            }
        }
    
		return new PHInteger[L](c);
	}
	
    public PHInteger[L]{L} mult{L}(DABigInteger[L]{L} b) :{L}
    throws (IllegalArgumentException){
		ArrayList[L]{L} a = this.value;
        
        if (a == null) return null;
        
        int n = a.size();
		ArrayList[L] c = new ArrayList[L]();
		for (int i = 0; i < n; i++) {
            try {
                BigIntPair[L] pai = (BigIntPair[L]) a.get(i);
                BigIntPair[L] pci = new BigIntPair[L](
                        pai.getX().multiply(b),
                        pai.getY().multiply(b));
                c.add(pci);
            } catch (NullPointerException ignored) {
            } catch (IndexOutOfBoundsException ignored) {
            } catch (ClassCastException ignored) {
            }
		}
		return new PHInteger[L](c);
	}
	
    public PHInteger[L]{L} mult{L}(PHInteger[L]{L} phi):{L}
    throws IllegalArgumentException{
		ArrayList[L] a = this.value;
        if (phi == null) return null;
		ArrayList[L] b = phi.getValueVector();
        if (a == null || b == null) 
            return null;
		
		int n = a.size();
		int m = b.size();
		
		ArrayList[L] c = new ArrayList[L]();
		BigIntPair[L] zeroPair = new BigIntPair[L](DABigInteger[L].ZERO(), 
            DABigInteger[L].ZERO());
		
		for (int k = 0; k < n+m; k++)
			c.add(zeroPair);
			
		for (int i = 0; i < n; i++) {
            BigIntPair[L] ai = null;
            try {
                ai = (BigIntPair[L])a.get(i);
            } catch (IndexOutOfBoundsException ignored) {
            } catch (ClassCastException ignored) {
            }
            if (ai == null) return null;
			DABigInteger[L] aiq = ai.getY();
			
			for (int j = 0; j < m ; j++) {
                try {
                    BigIntPair[L] mp = (BigIntPair[L])b.get(j);
                    
                    BigIntPair[L] pair = (BigIntPair[L])c.get(i+j+1);
                    
                    DABigInteger[L] x = pair.getX().add(ai.getX().multiply(mp.getX()));
                    DABigInteger[L] y = pair.getY().add(ai.getY().multiply(mp.getY()));
                    
                    pair = new BigIntPair [L](x,y);
                    c.set(i+j+1, pair);
                } catch (NullPointerException ignored) {
                    return null;
                } catch (IndexOutOfBoundsException ignored) {
                    return null;
                } catch (ClassCastException ignored) {
                    return null;
                }
			}
		}
		return new PHInteger[L](c);	
	}	
}
